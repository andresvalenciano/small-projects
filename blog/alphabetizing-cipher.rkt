#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 5.3 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 29 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 56 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 37
#"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1
          0 1189 0 26 3 12 #"#lang racket"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 19 #"; found solutions: "
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 19 #"; solve/monte-carlo"
0 0 22 29 1 #"\n"
0 0 17 3 34 #"; iacxvdreofugkphbtwzsjlmqyn (440)"
0 0 22 29 1 #"\n"
0 0 17 3 34 #"; hcawtqpemyrkbnfduvzsilgjxo (385)"
0 0 22 29 1 #"\n"
0 0 17 3 34 #"; hbrxucsenftdmogavwzqipjlyk (425)"
0 0 22 29 1 #"\n"
0 0 17 3 34 #"; idpwuamrkbqfelgczvyojthnxs (448)"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 21 #"; solve/hill-climbing"
0 0 22 29 1 #"\n"
0 0 17 3 34 #"; jdrxvasuobtegphcfwzqknimyl (470)"
0 0 22 29 1 #"\n"
0 0 17 3 34 #"; ibsxvaruoetfdpgclwzqmnhkyj (470)"
0 0 22 29 1 #"\n"
0 0 17 3 34 #"; iarzkcfjotudepgbswxqvmhlyn (474)"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 32 #"; load a word list to score from"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 2 #"fn"
0 0 22 3 1 #" "
0 0 19 3 16 #"\"word-list-short"
0 0 19 3 5 #".txt\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 9 #"word-list"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 20 #"with-input-from-file"
0 0 22 3 1 #" "
0 0 14 3 2 #"fn"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 22 3 5 #" () ("
0 0 15 3 10 #"for/vector"
0 0 22 3 3 #" (["
0 0 14 3 4 #"word"
0 0 22 3 2 #" ("
0 0 14 3 8 #"in-lines"
0 0 22 3 4 #")]) "
0 0 14 3 4 #"word"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 40 #"; create an encoding function from a key"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 11 #"make-cipher"
0 0 22 3 1 #" "
0 0 14 3 3 #"key"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 9 #"plaintext"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 12 #"build-string"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 14 3 13 #"string-length"
0 0 22 3 1 #" "
0 0 14 3 9 #"plaintext"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 1 #"i"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 10 #"string-ref"
0 0 22 3 1 #" "
0 0 14 3 3 #"key"
0 0 22 3 2 #" ("
0 0 14 3 1 #"-"
0 0 22 3 2 #" ("
0 0 14 3 13 #"char->integer"
0 0 22 3 2 #" ("
0 0 14 3 10 #"string-ref"
0 0 22 3 1 #" "
0 0 14 3 9 #"plaintext"
0 0 22 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 3 #")) "
0 0 20 3 2 #"97"
0 0 22 3 6 #"))))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 26 #"; test if a word is sorted"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 12 #"word-sorted?"
0 0 22 3 1 #" "
0 0 14 3 4 #"word"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 6 #"andmap"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 1 #"i"
0 0 22 3 3 #") ("
0 0 14 3 7 #"char<=?"
0 0 22 3 2 #" ("
0 0 14 3 10 #"string-ref"
0 0 22 3 1 #" "
0 0 14 3 4 #"word"
0 0 22 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 3 #") ("
0 0 14 3 10 #"string-ref"
0 0 22 3 1 #" "
0 0 14 3 4 #"word"
0 0 22 3 2 #" ("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   ("
0 0 14 3 5 #"range"
0 0 22 3 2 #" ("
0 0 14 3 1 #"-"
0 0 22 3 2 #" ("
0 0 14 3 13 #"string-length"
0 0 22 3 1 #" "
0 0 14 3 4 #"word"
0 0 22 3 2 #") "
0 0 20 3 1 #"1"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 16 #"; score a cipher"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 12 #"score-cipher"
0 0 22 3 1 #" "
0 0 14 3 6 #"cipher"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 7 #"for/sum"
0 0 22 3 3 #" (["
0 0 14 3 4 #"word"
0 0 22 3 2 #" ("
0 0 14 3 7 #"in-list"
0 0 22 3 1 #" "
0 0 14 3 9 #"word-list"
0 0 22 3 3 #")])"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 12 #"word-sorted?"
0 0 22 3 2 #" ("
0 0 14 3 6 #"cipher"
0 0 22 3 1 #" "
0 0 14 3 4 #"word"
0 0 22 3 3 #")) "
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 13 #"; score a key"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 9 #"score-key"
0 0 22 3 1 #" "
0 0 14 3 3 #"key"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 12 #"score-cipher"
0 0 22 3 2 #" ("
0 0 14 3 11 #"make-cipher"
0 0 22 3 1 #" "
0 0 14 3 3 #"key"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 23 #"; generate a random key"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 10 #"random-key"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 12 #"list->string"
0 0 22 3 2 #" ("
0 0 14 3 7 #"shuffle"
0 0 22 3 2 #" ("
0 0 14 3 12 #"string->list"
0 0 22 3 1 #" "
0 0 19 3 28 #"\"abcdefghijklmnopqrstuvwxyz\""
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 30 #"; swap two letters in a string"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 12 #"string-swap!"
0 0 22 3 1 #" "
0 0 14 3 3 #"str"
0 0 22 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 1 #" "
0 0 14 3 1 #"j"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 1 #"c"
0 0 22 3 2 #" ("
0 0 14 3 10 #"string-ref"
0 0 22 3 1 #" "
0 0 14 3 3 #"str"
0 0 22 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 11 #"string-set!"
0 0 22 3 1 #" "
0 0 14 3 3 #"str"
0 0 22 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 2 #" ("
0 0 14 3 10 #"string-ref"
0 0 22 3 1 #" "
0 0 14 3 3 #"str"
0 0 22 3 1 #" "
0 0 14 3 1 #"j"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 11 #"string-set!"
0 0 22 3 1 #" "
0 0 14 3 3 #"str"
0 0 22 3 1 #" "
0 0 14 3 1 #"j"
0 0 22 3 1 #" "
0 0 14 3 1 #"c"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 24 #"; functional string swap"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 11 #"string-swap"
0 0 22 3 1 #" "
0 0 14 3 3 #"str"
0 0 22 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 1 #" "
0 0 14 3 1 #"j"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 12 #"build-string"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   ("
0 0 14 3 13 #"string-length"
0 0 22 3 1 #" "
0 0 14 3 3 #"str"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 15 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"       [("
0 0 14 3 1 #"="
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 3 #") ("
0 0 14 3 10 #"string-ref"
0 0 22 3 1 #" "
0 0 14 3 3 #"str"
0 0 22 3 1 #" "
0 0 14 3 1 #"j"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"       [("
0 0 14 3 1 #"="
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 14 3 1 #"j"
0 0 22 3 3 #") ("
0 0 14 3 10 #"string-ref"
0 0 22 3 1 #" "
0 0 14 3 3 #"str"
0 0 22 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 14 3 10 #"string-ref"
0 0 22 3 1 #" "
0 0 14 3 3 #"str"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 6 #")]))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 34 #"; calculate a compatibility matrix"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 17 #"compatible-matrix"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 2 #"  "
0 0 17 3 44 #"; test if two words can both be alphabetical"
0 0 22 29 1 #"\n"
0 0 22 3 2 #"  "
0 0 17 3 46 #"; incompatible iff *a*b* in w1 and *b*a* in w2"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 11 #"compatible?"
0 0 22 3 1 #" "
0 0 14 3 2 #"w1"
0 0 22 3 1 #" "
0 0 14 3 2 #"w2"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 2 #"@1"
0 0 22 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 3 #") ("
0 0 14 3 10 #"string-ref"
0 0 22 3 1 #" "
0 0 14 3 2 #"w1"
0 0 22 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 2 #"@2"
0 0 22 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 3 #") ("
0 0 14 3 10 #"string-ref"
0 0 22 3 1 #" "
0 0 14 3 2 #"w2"
0 0 22 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 9 #"for*/fold"
0 0 22 3 3 #" (["
0 0 14 3 10 #"compatible"
0 0 22 3 1 #" "
0 0 20 3 2 #"#t"
0 0 22 3 2 #"])"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (["
0 0 14 3 2 #"i1"
0 0 22 3 2 #" ("
0 0 14 3 8 #"in-range"
0 0 22 3 2 #" ("
0 0 14 3 13 #"string-length"
0 0 22 3 1 #" "
0 0 14 3 2 #"w1"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ["
0 0 14 3 2 #"j1"
0 0 22 3 2 #" ("
0 0 14 3 8 #"in-range"
0 0 22 3 1 #" "
0 0 14 3 2 #"i1"
0 0 22 3 2 #" ("
0 0 14 3 13 #"string-length"
0 0 22 3 1 #" "
0 0 14 3 2 #"w1"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ["
0 0 14 3 2 #"i2"
0 0 22 3 2 #" ("
0 0 14 3 8 #"in-range"
0 0 22 3 2 #" ("
0 0 14 3 13 #"string-length"
0 0 22 3 1 #" "
0 0 14 3 2 #"w2"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ["
0 0 14 3 2 #"j2"
0 0 22 3 2 #" ("
0 0 14 3 8 #"in-range"
0 0 22 3 1 #" "
0 0 14 3 2 #"i2"
0 0 22 3 2 #" ("
0 0 14 3 13 #"string-length"
0 0 22 3 1 #" "
0 0 14 3 2 #"w2"
0 0 22 3 4 #"))])"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 3 #"and"
0 0 22 3 1 #" "
0 0 14 3 10 #"compatible"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ("
0 0 14 3 2 #"or"
0 0 22 3 1 #" "
0 0 17 3 29 #"; ignore *a*a* in either word"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 2 #"@1"
0 0 22 3 1 #" "
0 0 14 3 2 #"i1"
0 0 22 3 3 #") ("
0 0 14 3 2 #"@1"
0 0 22 3 1 #" "
0 0 14 3 2 #"j1"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 2 #"@2"
0 0 22 3 1 #" "
0 0 14 3 2 #"i2"
0 0 22 3 3 #") ("
0 0 14 3 2 #"@2"
0 0 22 3 1 #" "
0 0 14 3 2 #"j2"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"            "
0 0 17 3 23 #"; fail on *a*b* / *b*a*"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ("
0 0 14 3 3 #"not"
0 0 22 3 2 #" ("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 2 #"@1"
0 0 22 3 1 #" "
0 0 14 3 2 #"i1"
0 0 22 3 3 #") ("
0 0 14 3 2 #"@2"
0 0 22 3 1 #" "
0 0 14 3 2 #"j2"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 23 #"                      ("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 2 #"@1"
0 0 22 3 1 #" "
0 0 14 3 2 #"j1"
0 0 22 3 3 #") ("
0 0 14 3 2 #"@2"
0 0 22 3 1 #" "
0 0 14 3 2 #"i2"
0 0 22 3 8 #"))))))))"
0 0 22 29 1 #"\n"
0 0 22 3 2 #"  "
0 0 22 29 1 #"\n"
0 0 22 3 2 #"  "
0 0 17 3 40 #"; if the file doesn't exist, generate it"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 10 #"for/vector"
0 0 22 3 3 #" (["
0 0 14 3 1 #"i"
0 0 22 3 2 #" ("
0 0 14 3 8 #"in-range"
0 0 22 3 2 #" ("
0 0 14 3 13 #"vector-length"
0 0 22 3 1 #" "
0 0 14 3 9 #"word-list"
0 0 22 3 4 #"))])"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 6 #"printf"
0 0 22 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 8 #"working:"
0 0 19 3 1 #" "
0 0 19 3 6 #"~a/~a:"
0 0 19 3 6 #" ~a\\n\""
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ("
0 0 14 3 13 #"vector-length"
0 0 22 3 1 #" "
0 0 14 3 9 #"word-list"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ("
0 0 14 3 10 #"vector-ref"
0 0 22 3 1 #" "
0 0 14 3 9 #"word-list"
0 0 22 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 10 #"for/vector"
0 0 22 3 3 #" (["
0 0 14 3 1 #"j"
0 0 22 3 2 #" ("
0 0 14 3 8 #"in-range"
0 0 22 3 2 #" ("
0 0 14 3 13 #"vector-length"
0 0 22 3 1 #" "
0 0 14 3 9 #"word-list"
0 0 22 3 4 #"))])"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 11 #"compatible?"
0 0 22 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 22 3 1 #" "
0 0 14 3 9 #"word-list"
0 0 22 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 20 #"                   ("
0 0 14 3 10 #"vector-ref"
0 0 22 3 1 #" "
0 0 14 3 9 #"word-list"
0 0 22 3 1 #" "
0 0 14 3 1 #"j"
0 0 22 3 7 #")))))  "
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 27 #"; solve via random swapping"
0 0 22 29 1 #"\n"
0 8         842 4 2 #"(\0"
2 #")\0"
167 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 3 #"def"
7 #"wxtext\0"
3 1 #"i"
7 #"wxtext\0"
3 2 #"ne"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 17 #"solve/monte-carlo"
7 #"wxtext\0"
3 2 #" ["
7 #"wxtext\0"
3 5 #"guess"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 10 #"random-key"
7 #"wxtext\0"
3 2 #")]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 28 #"                           ["
7 #"wxtext\0"
3 5 #"score"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 6 #"-inf.0"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 28 #"                           ["
7 #"wxtext\0"
3 7 #"timeout"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 2 #"10"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 28 #"                           ["
7 #"wxtext\0"
3 5 #"timer"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 15 #"current-seconds"
7 #"wxtext\0"
3 3 #")])"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 49 #"; generate a new guess by swapping up to 10 pairs"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 3 #"  ("
7 #"wxtext\0"
3 6 #"define"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 9 #"new-guess"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 11 #"string-copy"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"guess"
7 #"wxtext\0"
3 2 #"))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 3 #"  ("
7 #"wxtext\0"
3 3 #"for"
7 #"wxtext\0"
3 3 #" (["
7 #"wxtext\0"
3 1 #"i"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 8 #"in-range"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 1 #"+"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 6 #"random"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 2 #"10"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 1 #"1"
7 #"wxtext\0"
3 4 #"))])"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 5 #"    ("
7 #"wxtext\0"
3 12 #"string-swap!"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 9 #"new-guess"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 6 #"random"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 2 #"26"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 6 #"random"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 2 #"26"
7 #"wxtext\0"
3 3 #")))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 3 #"  ("
7 #"wxtext\0"
3 6 #"define"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 9 #"new-score"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 9 #"score-key"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 9 #"new-guess"
7 #"wxtext\0"
3 2 #"))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 34 #"; if we have a new best, report it"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 3 #"  ("
7 #"wxtext\0"
3 4 #"cond"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 6 #"    [("
7 #"wxtext\0"
3 1 #">"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 1 #"-"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 15 #"current-seconds"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 5 #"timer"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 7 #"timeout"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 6 #"     ("
7 #"wxtext\0"
3 6 #"printf"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 11 #"\"timeout\\n\""
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 6 #"     ("
7 #"wxtext\0"
3 17 #"solve/monte-carlo"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 10 #"random-key"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 6 #"-inf.0"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 7 #"timeout"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 15 #"current-seconds"
7 #"wxtext\0"
3 3 #"))]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 6 #"    [("
7 #"wxtext\0"
3 1 #">"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 9 #"new-score"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"score"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 6 #"     ("
7 #"wxtext\0"
3 6 #"printf"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 11 #"\"~a (~a)\\n\""
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 9 #"new-guess"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 9 #"new-score"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 6 #"     ("
7 #"wxtext\0"
3 17 #"solve/monte-carlo"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 9 #"new-guess"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 9 #"new-score"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 7 #"timeout"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 15 #"current-seconds"
7 #"wxtext\0"
3 3 #"))]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 5 #"    ["
7 #"wxtext\0"
3 4 #"else"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 6 #"     ("
7 #"wxtext\0"
3 17 #"solve/monte-carlo"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"guess"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"score"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 7 #"timeout"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"timer"
7 #"wxtext\0"
3 4 #")]))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 32 #"; solve via direct hill climbing"
0 0 22 29 1 #"\n"
0 8        1402 4 2 #"(\0"
2 #")\0"
279 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 2 #"de"
7 #"wxtext\0"
3 1 #"f"
7 #"wxtext\0"
3 3 #"ine"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 19 #"solve/hill-climbing"
7 #"wxtext\0"
3 2 #" ["
7 #"wxtext\0"
3 5 #"guess"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 10 #"random-key"
7 #"wxtext\0"
3 2 #")]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 30 #"                             ["
7 #"wxtext\0"
3 5 #"score"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 6 #"-inf.0"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 30 #"                             ["
7 #"wxtext\0"
3 13 #"overall-guess"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"guess"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 30 #"                             ["
7 #"wxtext\0"
3 13 #"overall-score"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"score"
7 #"wxtext\0"
3 2 #"])"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 32 #"; try every possible single swap"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 3 #"  ("
7 #"wxtext\0"
3 13 #"define-values"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 9 #"new-guess"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 9 #"new-score"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 5 #"    ("
7 #"wxtext\0"
3 9 #"for*/fold"
7 #"wxtext\0"
3 3 #" (["
7 #"wxtext\0"
3 5 #"guess"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"guess"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 17 #"                ["
7 #"wxtext\0"
3 5 #"score"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"score"
7 #"wxtext\0"
3 2 #"])"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 17 #"               (["
7 #"wxtext\0"
3 1 #"i"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 8 #"in-range"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 2 #"26"
7 #"wxtext\0"
3 2 #")]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 17 #"                ["
7 #"wxtext\0"
3 1 #"j"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 8 #"in-range"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"i"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 2 #"26"
7 #"wxtext\0"
3 3 #")])"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 7 #"      ("
7 #"wxtext\0"
3 6 #"define"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 9 #"new-guess"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 11 #"string-swap"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"guess"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"i"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"j"
7 #"wxtext\0"
3 2 #"))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 7 #"      ("
7 #"wxtext\0"
3 6 #"define"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 9 #"new-score"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 9 #"score-key"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 9 #"new-guess"
7 #"wxtext\0"
3 2 #"))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 7 #"      ("
7 #"wxtext\0"
3 2 #"if"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 1 #">"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 9 #"new-score"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"score"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 11 #"          ("
7 #"wxtext\0"
3 6 #"values"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 9 #"new-guess"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 9 #"new-score"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 11 #"          ("
7 #"wxtext\0"
3 6 #"values"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"guess"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"score"
7 #"wxtext\0"
3 4 #"))))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 58 #"; update the overall best (will actually print next round)"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 3 #"  ("
7 #"wxtext\0"
3 13 #"define-values"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 17 #"new-overall-guess"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 17 #"new-overall-score"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 5 #"    ("
7 #"wxtext\0"
3 2 #"if"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 2 #">="
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 9 #"new-score"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 13 #"overall-score"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 9 #"        ("
7 #"wxtext\0"
3 6 #"values"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 9 #"new-guess"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 9 #"new-score"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 9 #"        ("
7 #"wxtext\0"
3 6 #"values"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 13 #"overall-guess"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 13 #"overall-score"
7 #"wxtext\0"
3 3 #")))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 46 #"; print out local best values and best overall"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 3 #"  ("
7 #"wxtext\0"
3 4 #"cond"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 6 #"    [("
7 #"wxtext\0"
3 6 #"equal?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"guess"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 9 #"new-guess"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 6 #"     ("
7 #"wxtext\0"
3 6 #"printf"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 28 #"\"local maximum, shuffling\\n\""
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 6 #"     ("
7 #"wxtext\0"
3 3 #"for"
7 #"wxtext\0"
3 3 #" (["
7 #"wxtext\0"
3 1 #"i"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 8 #"in-range"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 1 #"+"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 6 #"random"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"6"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 1 #"4"
7 #"wxtext\0"
3 4 #"))])"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 8 #"       ("
7 #"wxtext\0"
3 12 #"string-swap!"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"guess"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 6 #"random"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 2 #"26"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 6 #"random"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 2 #"26"
7 #"wxtext\0"
3 3 #")))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 6 #"     ("
7 #"wxtext\0"
3 6 #"define"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 9 #"new-score"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 9 #"score-key"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 9 #"new-guess"
7 #"wxtext\0"
3 2 #"))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 6 #"     ("
7 #"wxtext\0"
3 6 #"printf"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 31 #"\"~a (~a)  \\toverall: ~a (~a)\\n\""
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 9 #"new-guess"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 9 #"new-score"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 13 #"overall-guess"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 13 #"overall-score"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 6 #"     ("
7 #"wxtext\0"
3 19 #"solve/hill-climbing"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 9 #"new-guess"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 9 #"new-score"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 17 #"new-overall-guess"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 17 #"new-overall-score"
7 #"wxtext\0"
3 2 #")]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 5 #"    ["
7 #"wxtext\0"
3 4 #"else"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 6 #"     ("
7 #"wxtext\0"
3 6 #"printf"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 31 #"\"~a (~a)  \\toverall: ~a (~a)\\n\""
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 9 #"new-guess"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 9 #"new-score"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 13 #"overall-guess"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 13 #"overall-score"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 6 #"     ("
7 #"wxtext\0"
3 19 #"solve/hill-climbing"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 9 #"new-guess"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 9 #"new-score"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 17 #"new-overall-guess"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 17 #"new-overall-score"
7 #"wxtext\0"
3 4 #")]))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 25 #"; solve using matrix math"
0 0 22 29 1 #"\n"
0 0 17 3 18 #"; TODO: unfinished"
0 0 22 29 1 #"\n"
0 8        1012 4 2 #"(\0"
2 #")\0"
201 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 3 #"def"
7 #"wxtext\0"
3 1 #"i"
7 #"wxtext\0"
3 2 #"ne"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 17 #"solve/matrix-math"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 62 #"; count how many times each letter should be after each letter"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 3 #"  ("
7 #"wxtext\0"
3 6 #"define"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"m"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 5 #"    ("
7 #"wxtext\0"
3 10 #"for/vector"
7 #"wxtext\0"
3 3 #" (["
7 #"wxtext\0"
3 1 #"i"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 8 #"in-range"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 2 #"26"
7 #"wxtext\0"
3 3 #")])"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 7 #"      ("
7 #"wxtext\0"
3 10 #"for/vector"
7 #"wxtext\0"
3 3 #" (["
7 #"wxtext\0"
3 1 #"i"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 8 #"in-range"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 2 #"26"
7 #"wxtext\0"
3 3 #")])"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 8 #"        "
7 #"wxtext\0"
3 1 #"0"
7 #"wxtext\0"
3 3 #")))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 33 #"; increment a cell in that matrix"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 3 #"  ("
7 #"wxtext\0"
3 6 #"define"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 1 #"@"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"i"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"j"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 5 #"    ("
7 #"wxtext\0"
3 10 #"vector-ref"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 10 #"vector-ref"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"m"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"i"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 1 #"j"
7 #"wxtext\0"
3 2 #"))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 3 #"  ("
7 #"wxtext\0"
3 6 #"define"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 2 #"++"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"i"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"j"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 5 #"    ("
7 #"wxtext\0"
3 11 #"vector-set!"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 9 #"vector-re"
7 #"wxtext\0"
3 1 #"f"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"m"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"i"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 1 #"j"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 1 #"+"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"1"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 1 #"@"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"i"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"j"
7 #"wxtext\0"
3 4 #"))))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 22 #"; add all of the words"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 3 #"  ("
7 #"wxtext\0"
3 4 #"for*"
7 #"wxtext\0"
3 3 #" (["
7 #"wxtext\0"
3 4 #"word"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 7 #"in-list"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 9 #"word-list"
7 #"wxtext\0"
3 2 #")]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 10 #"         ["
7 #"wxtext\0"
3 1 #"i"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 8 #"in-range"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 13 #"string-length"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 4 #"word"
7 #"wxtext\0"
3 3 #"))]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 10 #"         ["
7 #"wxtext\0"
3 1 #"j"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 8 #"in-range"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"i"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 13 #"string-length"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 4 #"word"
7 #"wxtext\0"
3 4 #"))])"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 5 #"    ("
7 #"wxtext\0"
3 2 #"++"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 1 #"-"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 13 #"char->integer"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 10 #"string-ref"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 4 #"word"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"i"
7 #"wxtext\0"
3 3 #")) "
7 #"wxtext\0"
3 2 #"97"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 9 #"        ("
7 #"wxtext\0"
3 1 #"-"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 13 #"char->integer"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 10 #"string-ref"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 4 #"word"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"j"
7 #"wxtext\0"
3 3 #")) "
7 #"wxtext\0"
3 2 #"97"
7 #"wxtext\0"
3 3 #")))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 16 #"; reset diagonal"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 3 #"  ("
7 #"wxtext\0"
3 3 #"for"
7 #"wxtext\0"
3 3 #" (["
7 #"wxtext\0"
3 1 #"i"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 8 #"in-range"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 2 #"26"
7 #"wxtext\0"
3 3 #")])"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 5 #"    ("
7 #"wxtext\0"
3 11 #"vector-set!"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 10 #"vector-ref"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"m"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"i"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 1 #"i"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"0"
7 #"wxtext\0"
3 2 #"))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 1 #"m"
7 #"wxtext\0"
3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 43 #"; simple recursive search on the word lists"
0 0 22 29 1 #"\n"
0 8        1677 4 2 #"(\0"
2 #")\0"
334 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 3 #"def"
7 #"wxtext\0"
3 1 #"i"
7 #"wxtext\0"
3 2 #"ne"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 12 #"solve/search"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 44 #"; test if two words can both be alphabetical"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 46 #"; incompatible iff *a*b* in w1 and *b*a* in w2"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 3 #"  ("
7 #"wxtext\0"
3 6 #"define"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 11 #"compatible?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 2 #"w1"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 2 #"w2"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 5 #"    ("
7 #"wxtext\0"
3 6 #"define"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 2 #"@1"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"i"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 10 #"string-ref"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 2 #"w1"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"i"
7 #"wxtext\0"
3 2 #"))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 5 #"    ("
7 #"wxtext\0"
3 6 #"define"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 2 #"@2"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"i"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 10 #"string-ref"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 2 #"w2"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"i"
7 #"wxtext\0"
3 2 #"))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 5 #"    ("
7 #"wxtext\0"
3 9 #"for*/fold"
7 #"wxtext\0"
3 3 #" (["
7 #"wxtext\0"
3 10 #"compatible"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 2 #"#t"
7 #"wxtext\0"
3 2 #"])"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 17 #"               (["
7 #"wxtext\0"
3 2 #"i1"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 8 #"in-range"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 13 #"string-length"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 2 #"w1"
7 #"wxtext\0"
3 3 #"))]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 17 #"                ["
7 #"wxtext\0"
3 2 #"j1"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 8 #"in-range"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 2 #"i1"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 13 #"string-length"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 2 #"w1"
7 #"wxtext\0"
3 3 #"))]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 17 #"                ["
7 #"wxtext\0"
3 2 #"i2"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 8 #"in-range"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 13 #"string-length"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 2 #"w2"
7 #"wxtext\0"
3 3 #"))]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 17 #"                ["
7 #"wxtext\0"
3 2 #"j2"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 8 #"in-range"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 2 #"i2"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 13 #"string-length"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 2 #"w2"
7 #"wxtext\0"
3 4 #"))])"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 7 #"      ("
7 #"wxtext\0"
3 3 #"and"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 10 #"compatible"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 12 #"           ("
7 #"wxtext\0"
3 2 #"or"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 29 #"; ignore *a*a* in either word"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 16 #"               ("
7 #"wxtext\0"
3 3 #"eq?"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 2 #"@1"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 2 #"i1"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 2 #"@1"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 2 #"j1"
7 #"wxtext\0"
3 2 #"))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 16 #"               ("
7 #"wxtext\0"
3 3 #"eq?"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 2 #"@2"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 2 #"i2"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 2 #"@2"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 2 #"j2"
7 #"wxtext\0"
3 2 #"))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 15 #"               "
7 #"wxtext\0"
3 23 #"; fail on *a*b* / *b*a*"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 16 #"               ("
7 #"wxtext\0"
3 3 #"not"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 3 #"and"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 3 #"eq?"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 2 #"@1"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 2 #"i1"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 2 #"@2"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 2 #"j2"
7 #"wxtext\0"
3 2 #"))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 26 #"                         ("
7 #"wxtext\0"
3 3 #"eq?"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 2 #"@1"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 2 #"j1"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 2 #"@2"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 2 #"i2"
7 #"wxtext\0"
3 8 #"))))))))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 3 #"  ("
7 #"wxtext\0"
3 6 #"define"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 10 #"best-block"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 2 #"#f"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 3 #"  ("
7 #"wxtext\0"
3 6 #"define"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 9 #"best-size"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"0"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 3 #"  ("
7 #"wxtext\0"
3 6 #"define"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 6 #"search"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 13 #"current-block"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 12 #"current-size"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 15 #"remaining-words"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 5 #"    ("
7 #"wxtext\0"
3 3 #"for"
7 #"wxtext\0"
3 3 #" (["
7 #"wxtext\0"
3 4 #"word"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 7 #"in-list"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 15 #"remaining-words"
7 #"wxtext\0"
3 3 #")])"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 6 #"      "
7 #"wxtext\0"
3 26 #"; report new larger blocks"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 7 #"      ("
7 #"wxtext\0"
3 4 #"when"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 1 #">"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 12 #"current-size"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 9 #"best-size"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 9 #"        ("
7 #"wxtext\0"
3 6 #"printf"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 22 #"\"new best block: ~a\\n\""
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 12 #"current-size"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 9 #"        ("
7 #"wxtext\0"
3 4 #"set!"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 10 #"best-block"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 13 #"current-block"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 9 #"        ("
7 #"wxtext\0"
3 4 #"set!"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 9 #"best-size"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 12 #"current-size"
7 #"wxtext\0"
3 2 #"))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 6 #"      "
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 6 #"      "
7 #"wxtext\0"
3 32 #"; the word works, search with it"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 7 #"      ("
7 #"wxtext\0"
3 4 #"when"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 6 #"andmap"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 6 #"lambda"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 10 #"block-word"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 23 #"                      ("
7 #"wxtext\0"
3 11 #"compatible?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 10 #"block-word"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 4 #"word"
7 #"wxtext\0"
3 2 #"))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 18 #"                  "
7 #"wxtext\0"
3 13 #"current-block"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 9 #"        ("
7 #"wxtext\0"
3 6 #"search"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"cons"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 4 #"word"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 13 #"current-block"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 17 #"                ("
7 #"wxtext\0"
3 1 #"+"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"1"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 12 #"current-size"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 17 #"                ("
7 #"wxtext\0"
3 6 #"remove"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 4 #"word"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 15 #"remaining-words"
7 #"wxtext\0"
3 3 #")))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 6 #"      "
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 6 #"      "
7 #"wxtext\0"
3 28 #"; either way, try without it"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 7 #"      ("
7 #"wxtext\0"
3 6 #"search"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 13 #"current-block"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 14 #"              "
7 #"wxtext\0"
3 12 #"current-size"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 15 #"              ("
7 #"wxtext\0"
3 6 #"remove"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 4 #"word"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 15 #"remaining-words"
7 #"wxtext\0"
3 4 #"))))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 3 #"  ("
7 #"wxtext\0"
3 6 #"search"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 3 #"() "
7 #"wxtext\0"
3 1 #"0"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 12 #"vector->list"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 9 #"word-list"
7 #"wxtext\0"
3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 70
(
 #"; solve using the bron-kerbosch method to calculate the maximal cliq"
 #"ue"
) 0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 25 #"solve/graph/bron-kerbosch"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 2 #"cm"
0 0 22 3 2 #" ("
0 0 14 3 17 #"compatible-matrix"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cm?"
0 0 22 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 1 #" "
0 0 14 3 1 #"j"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 10 #"vector-ref"
0 0 22 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 22 3 1 #" "
0 0 14 3 2 #"cm"
0 0 22 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 2 #") "
0 0 14 3 1 #"j"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 2 #"  "
0 0 22 29 1 #"\n"
0 0 22 3 2 #"  "
0 0 17 3 41 #"; find the set of neighbors of a vertex v"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 9 #"neighbors"
0 0 22 3 1 #" "
0 0 14 3 1 #"v"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 7 #"for/set"
0 0 22 3 3 #" (["
0 0 14 3 1 #"i"
0 0 22 3 2 #" ("
0 0 14 3 8 #"in-range"
0 0 22 3 2 #" ("
0 0 14 3 13 #"vector-length"
0 0 22 3 1 #" "
0 0 14 3 9 #"word-list"
0 0 22 3 4 #"))] "
0 0 22 29 1 #"\n"
0 0 22 3 22 #"              #:when ("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 3 #"not"
0 0 22 3 2 #" ("
0 0 14 3 1 #"="
0 0 22 3 1 #" "
0 0 14 3 1 #"v"
0 0 22 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 4 #")) ("
0 0 14 3 3 #"cm?"
0 0 22 3 1 #" "
0 0 14 3 1 #"v"
0 0 22 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 4 #"))) "
0 0 22 29 1 #"\n"
0 0 22 3 13 #"             "
0 0 14 3 1 #"i"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 2 #"  "
0 0 22 29 1 #"\n"
0 0 22 3 2 #"  "
0 0 17 3 61
#"; use the Bron-Kerbosch algorithm to find all maximal cliques"
0 0 22 29 1 #"\n"
0 0 22 3 2 #"  "
0 0 17 3 22 #"; remember the largest"
0 0 22 29 1 #"\n"
0 0 22 3 2 #"  "
0 0 17 3 62
#"; http://en.wikipedia.org/wiki/Bron%E2%80%93Kerbosch_algorithm"
0 0 22 29 1 #"\n"
0 0 22 3 2 #"  "
0 0 17 3 18 #"; this is hacky :("
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 9 #"set-first"
0 0 22 3 1 #" "
0 0 14 3 1 #"s"
0 0 22 3 3 #") ("
0 0 14 3 3 #"car"
0 0 22 3 2 #" ("
0 0 14 3 9 #"set->list"
0 0 22 3 1 #" "
0 0 14 3 1 #"s"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 2 #"  "
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 11 #"best-clique"
0 0 22 3 1 #" "
0 0 20 3 2 #"#f"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 9 #"best-size"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 2 #"  "
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 13 #"bron-kerbosch"
0 0 22 3 1 #" "
0 0 14 3 1 #"r"
0 0 22 3 1 #" "
0 0 14 3 1 #"p"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 10 #"set-empty?"
0 0 22 3 1 #" "
0 0 14 3 1 #"p"
0 0 22 3 3 #") ("
0 0 14 3 10 #"set-empty?"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"        "
0 0 17 3 49 #"; found a new maximal clique, test if it's bigger"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 15 3 4 #"when"
0 0 22 3 2 #" ("
0 0 14 3 2 #">="
0 0 22 3 2 #" ("
0 0 14 3 9 #"set-count"
0 0 22 3 1 #" "
0 0 14 3 1 #"r"
0 0 22 3 2 #") "
0 0 14 3 9 #"best-size"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 14 3 6 #"printf"
0 0 22 3 1 #" "
0 0 19 3 15 #"\"maximal clique"
0 0 19 3 1 #" "
0 0 19 3 5 #"found"
0 0 19 3 2 #" ("
0 0 19 3 2 #"~s"
0 0 19 3 1 #" "
0 0 19 3 13 #"items)\\n~s\\n\""
0 0 22 3 2 #" ("
0 0 14 3 9 #"set-count"
0 0 22 3 1 #" "
0 0 14 3 1 #"r"
0 0 22 3 2 #") "
0 0 14 3 1 #"r"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 14 3 4 #"set!"
0 0 22 3 1 #" "
0 0 14 3 11 #"best-clique"
0 0 22 3 1 #" "
0 0 14 3 1 #"r"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 14 3 4 #"set!"
0 0 22 3 1 #" "
0 0 14 3 9 #"best-size"
0 0 22 3 2 #" ("
0 0 14 3 9 #"set-count"
0 0 22 3 1 #" "
0 0 14 3 1 #"r"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"        "
0 0 17 3 16 #"; otherwise loop"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 22 3 1 #" "
0 0 14 3 4 #"loop"
0 0 22 3 3 #" (["
0 0 14 3 1 #"p"
0 0 22 3 1 #" "
0 0 14 3 1 #"p"
0 0 22 3 3 #"] ["
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 2 #"])"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 15 3 4 #"when"
0 0 22 3 2 #" ("
0 0 14 3 3 #"not"
0 0 22 3 2 #" ("
0 0 14 3 10 #"set-empty?"
0 0 22 3 1 #" "
0 0 14 3 1 #"p"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 1 #"v"
0 0 22 3 2 #" ("
0 0 14 3 9 #"set-first"
0 0 22 3 1 #" "
0 0 14 3 1 #"p"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 2 #"nv"
0 0 22 3 2 #" ("
0 0 14 3 9 #"neighbors"
0 0 22 3 1 #" "
0 0 14 3 1 #"v"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ("
0 0 14 3 13 #"bron-kerbosch"
0 0 22 3 2 #" ("
0 0 14 3 9 #"set-union"
0 0 22 3 1 #" "
0 0 14 3 1 #"r"
0 0 22 3 2 #" ("
0 0 14 3 3 #"set"
0 0 22 3 1 #" "
0 0 14 3 1 #"v"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 28 #"                           ("
0 0 14 3 13 #"set-intersect"
0 0 22 3 1 #" "
0 0 14 3 1 #"p"
0 0 22 3 1 #" "
0 0 14 3 2 #"nv"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 28 #"                           ("
0 0 14 3 13 #"set-intersect"
0 0 22 3 1 #" "
0 0 14 3 1 #"p"
0 0 22 3 1 #" "
0 0 14 3 2 #"nv"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ("
0 0 14 3 4 #"loop"
0 0 22 3 2 #" ("
0 0 14 3 10 #"set-remove"
0 0 22 3 1 #" "
0 0 14 3 1 #"p"
0 0 22 3 1 #" "
0 0 14 3 1 #"v"
0 0 22 3 3 #") ("
0 0 14 3 9 #"set-union"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 2 #" ("
0 0 14 3 3 #"set"
0 0 22 3 1 #" "
0 0 14 3 1 #"v"
0 0 22 3 7 #")))))))"
0 0 22 29 1 #"\n"
0 0 22 3 2 #"  "
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 14 #"bron-kerbosch2"
0 0 22 3 1 #" "
0 0 14 3 1 #"r"
0 0 22 3 1 #" "
0 0 14 3 1 #"p"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      [("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 10 #"set-empty?"
0 0 22 3 1 #" "
0 0 14 3 1 #"p"
0 0 22 3 3 #") ("
0 0 14 3 10 #"set-empty?"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"       "
0 0 17 3 49 #"; found a new maximal clique, test if it's bigger"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 15 3 4 #"when"
0 0 22 3 2 #" ("
0 0 14 3 2 #">="
0 0 22 3 2 #" ("
0 0 14 3 9 #"set-count"
0 0 22 3 1 #" "
0 0 14 3 1 #"r"
0 0 22 3 2 #") "
0 0 14 3 9 #"best-size"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 14 3 6 #"printf"
0 0 22 3 1 #" "
0 0 19 3 15 #"\"maximal clique"
0 0 19 3 1 #" "
0 0 19 3 5 #"found"
0 0 19 3 2 #" ("
0 0 19 3 2 #"~s"
0 0 19 3 14 #" items)\\n~s\\n\""
0 0 22 3 2 #" ("
0 0 14 3 9 #"set-count"
0 0 22 3 1 #" "
0 0 14 3 1 #"r"
0 0 22 3 2 #") "
0 0 14 3 1 #"r"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 14 3 4 #"set!"
0 0 22 3 1 #" "
0 0 14 3 11 #"best-clique"
0 0 22 3 1 #" "
0 0 14 3 1 #"r"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 14 3 4 #"set!"
0 0 22 3 1 #" "
0 0 14 3 9 #"best-size"
0 0 22 3 2 #" ("
0 0 14 3 9 #"set-count"
0 0 22 3 1 #" "
0 0 14 3 1 #"r"
0 0 22 3 4 #")))]"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"        "
0 0 17 3 41 #"; otherwise choose a pivot then loop loop"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 5 #"pivot"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 2 #" ("
0 0 14 3 7 #"shuffle"
0 0 22 3 2 #" ("
0 0 14 3 9 #"set->list"
0 0 22 3 2 #" ("
0 0 14 3 9 #"set-union"
0 0 22 3 1 #" "
0 0 14 3 1 #"p"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 6 #"npivot"
0 0 22 3 2 #" ("
0 0 14 3 9 #"neighbors"
0 0 22 3 1 #" "
0 0 14 3 5 #"pivot"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 15 3 3 #"let"
0 0 22 3 1 #" "
0 0 14 3 4 #"loop"
0 0 22 3 3 #" (["
0 0 14 3 2 #"vs"
0 0 22 3 2 #" ("
0 0 14 3 12 #"set-subtract"
0 0 22 3 1 #" "
0 0 14 3 1 #"p"
0 0 22 3 2 #" ("
0 0 14 3 9 #"neighbors"
0 0 22 3 1 #" "
0 0 14 3 5 #"pivot"
0 0 22 3 5 #"))] ["
0 0 14 3 1 #"p"
0 0 22 3 1 #" "
0 0 14 3 1 #"p"
0 0 22 3 3 #"] ["
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 2 #"])"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 15 3 4 #"when"
0 0 22 3 2 #" ("
0 0 14 3 3 #"not"
0 0 22 3 2 #" ("
0 0 14 3 10 #"set-empty?"
0 0 22 3 1 #" "
0 0 14 3 2 #"vs"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 1 #"v"
0 0 22 3 2 #" ("
0 0 14 3 9 #"set-first"
0 0 22 3 1 #" "
0 0 14 3 2 #"vs"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 2 #"nv"
0 0 22 3 2 #" ("
0 0 14 3 9 #"neighbors"
0 0 22 3 1 #" "
0 0 14 3 1 #"v"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"           "
0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ("
0 0 14 3 14 #"bron-kerbosch2"
0 0 22 3 2 #" ("
0 0 14 3 9 #"set-union"
0 0 22 3 1 #" "
0 0 14 3 1 #"r"
0 0 22 3 2 #" ("
0 0 14 3 3 #"set"
0 0 22 3 1 #" "
0 0 14 3 1 #"v"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 28 #"                           ("
0 0 14 3 13 #"set-intersect"
0 0 22 3 1 #" "
0 0 14 3 1 #"p"
0 0 22 3 1 #" "
0 0 14 3 2 #"nv"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 28 #"                           ("
0 0 14 3 13 #"set-intersect"
0 0 22 3 1 #" "
0 0 14 3 1 #"p"
0 0 22 3 1 #" "
0 0 14 3 2 #"nv"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"           "
0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ("
0 0 14 3 4 #"loop"
0 0 22 3 2 #" ("
0 0 14 3 10 #"set-remove"
0 0 22 3 1 #" "
0 0 14 3 2 #"vs"
0 0 22 3 1 #" "
0 0 14 3 1 #"v"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 18 #"                 ("
0 0 14 3 10 #"set-remove"
0 0 22 3 1 #" "
0 0 14 3 1 #"p"
0 0 22 3 1 #" "
0 0 14 3 1 #"v"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 18 #"                 ("
0 0 14 3 9 #"set-union"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 2 #" ("
0 0 14 3 3 #"set"
0 0 22 3 1 #" "
0 0 14 3 1 #"v"
0 0 22 3 8 #")))))]))"
0 0 22 29 1 #"\n"
0 0 22 3 2 #"  "
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 14 #"bron-kerbosch2"
0 0 22 3 2 #" ("
0 0 14 3 3 #"set"
0 0 22 3 3 #") ("
0 0 14 3 9 #"list->set"
0 0 22 3 2 #" ("
0 0 14 3 5 #"range"
0 0 22 3 2 #" ("
0 0 14 3 13 #"vector-length"
0 0 22 3 1 #" "
0 0 14 3 9 #"word-list"
0 0 22 3 5 #"))) ("
0 0 14 3 3 #"set"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 2 #"  "
0 0 22 29 1 #"\n"
0 0 22 3 2 #"  "
0 0 14 3 11 #"best-clique"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 2 #"  "
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 25 #"solve/graph/bron-kerbosch"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0           0
