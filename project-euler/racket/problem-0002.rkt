#lang racket

#| http://projecteuler.net/problem=2

Each new term in the Fibonacci sequence is generated by adding the previous two terms.
By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million,
find the sum of the even-valued terms.
|#
(define (problem-0002) (sum-fibs-under-inline 4000000))

; --- direct version ---

; sum Fibonacci numbers under n
(define (sum-fibs-under n)
  (let loop ([i 1] [sum 0])
    (define fibi (fib i))
    (cond
      [(and (< fibi n) (even? fibi))
       (loop (+ i 1) (+ sum fibi))]
      [(< fibi n)
       (loop (+ i 1) sum)]
      [else 
       sum])))

; calculate the nth Fibonacci number
(define (fib n)
  (if (<= n 2)
      n
      (+ (fib (- n 1)) (fib (- n 2)))))

; --- inline version ---

; sum Fibonacci numbers under n
(define (sum-fibs-under-inline n)
  (let loop ([this 1] [next 2] [sum 0])
    (cond
      [(> this n)
       sum]
      [else
       (loop next (+ this next) (if (even? this)
                                    (+ sum this)
                                    sum))])))
  
; --- psuedo-generator version ---

; sum Fibonacci numbers under n
(define (sum-fibs-under-gen n)
  (for/sum ([n (in-producer (fibonacci) (lambda (n) (> n limit)))]
            #:when (even? n))
    n))

; a psuedo-generator of fibonacci numbers
(define (fibonacci [a 1] [b 2])
  (lambda ()
    (let ([c (+ a b)] [r a])
      (set! a b)
      (set! b c)
      r)))